include = [
    "pyproject.toml",
    "RAG_QA/**",
    "utils/**",
    "logger/**",
    "README.md",
]
exclude = [
    "docs/**",
]

[lint]
select = ["ALL"]
ignore = [
    # groups
    "ANN",  # use mypy for annotations
    "COM",  # turn off weird comma rules
    "EM",   # string messages for exceptions
    "FA",   # use typing imports
    "FBT",  # bool arguments
    "PTH",  # os instead of Pathlib when useful
    "RET",  # format returns as needed for readability
    "T20",  # printing allowed

    # naming - we allow uppercase letters, e.g. X_train, use_3D
    "N802",
    "N803",
    "N806",

    # docstrings - we tailor rules to our own convention
    "D100",  # no module docstrings
    "D104",  # no package docstrings
    "D107",  # no __init__ docstrings
    "D200",  # always multiline docstrings
    "D203",  # prefer D211, no blank line between docstring and code
    "D205",  # no blank line between summary and description
    "D212",  # start docstrings on second line
    "D213",  # start docs on next line
    "D413",  # no empty line after last docstring section

    # various other things
    "B028",     # simple warnings
    "C408",     # call dict(), list(), set()
    "E731",     # Lambda expressions
    "TRY003",   # long error messages
    "PD901",    # df variable for DataFrames
    "PGH003",   # ignore types where necessary
    "PLC0415",  # imports inside functions/methods
    "PLR2004",  # numerical constants
    "PLR0913",  # many arguments
    "PLW2901",  # overwrite loop variable for readability
    "PT011",    # use ValueError
    "PYI041",   # explicitly mark Union[int, float] for readability
    "RUF002",   # regular minus sign in docs
    "RUF012",   # mutable class attributes
    "SLF001",   # use private members
    "SIM108",   # if/else instead of ternary if when we need
    "PERF203",  # `try`-`except` within a loop incurs performance overhead
]


[lint.pycodestyle]
# formatter will reformat lines to length 88, so we report errors only for
# extremely long lines
max-line-length = 200